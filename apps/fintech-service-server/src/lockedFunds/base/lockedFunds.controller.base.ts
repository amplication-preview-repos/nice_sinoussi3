/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LockedFundsService } from "../lockedFunds.service";
import { LockedFundsCreateInput } from "./LockedFundsCreateInput";
import { LockedFunds } from "./LockedFunds";
import { LockedFundsFindManyArgs } from "./LockedFundsFindManyArgs";
import { LockedFundsWhereUniqueInput } from "./LockedFundsWhereUniqueInput";
import { LockedFundsUpdateInput } from "./LockedFundsUpdateInput";

export class LockedFundsControllerBase {
  constructor(protected readonly service: LockedFundsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LockedFunds })
  async createLockedFunds(
    @common.Body() data: LockedFundsCreateInput
  ): Promise<LockedFunds> {
    return await this.service.createLockedFunds({
      data: {
        ...data,

        wallet: data.wallet
          ? {
              connect: data.wallet,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        startDate: true,
        endDate: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LockedFunds] })
  @ApiNestedQuery(LockedFundsFindManyArgs)
  async lockedFundsItems(
    @common.Req() request: Request
  ): Promise<LockedFunds[]> {
    const args = plainToClass(LockedFundsFindManyArgs, request.query);
    return this.service.lockedFundsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        startDate: true,
        endDate: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LockedFunds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lockedFunds(
    @common.Param() params: LockedFundsWhereUniqueInput
  ): Promise<LockedFunds | null> {
    const result = await this.service.lockedFunds({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        amount: true,
        startDate: true,
        endDate: true,

        wallet: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LockedFunds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLockedFunds(
    @common.Param() params: LockedFundsWhereUniqueInput,
    @common.Body() data: LockedFundsUpdateInput
  ): Promise<LockedFunds | null> {
    try {
      return await this.service.updateLockedFunds({
        where: params,
        data: {
          ...data,

          wallet: data.wallet
            ? {
                connect: data.wallet,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          startDate: true,
          endDate: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LockedFunds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLockedFunds(
    @common.Param() params: LockedFundsWhereUniqueInput
  ): Promise<LockedFunds | null> {
    try {
      return await this.service.deleteLockedFunds({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          amount: true,
          startDate: true,
          endDate: true,

          wallet: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
